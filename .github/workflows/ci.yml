name: CI

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using brakeman
        run: bin/brakeman --no-pager
      
      - name: Scan Gemfile via bundler
        run: bundle exec bundler-audit

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Rubocop
        run: bin/rubocop -f github

      - name: erb_lint
        run: bundle exec erb_lint --lint-all

  scan_database:
    runs-on: ubuntu-latest
    needs: [scan_ruby, scan_js, lint]

    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: event_man_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    env:
      RAILS_ENV: test
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Prepare DB
        run: bin/rails db:test:prepare

      - name: Check database consistency
        run: bundle exec database_consistency

      - name: Check database health
        run: bundle exec rails active_record_doctor

  test:
    runs-on: ubuntu-latest
    needs: scan_database

    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: event_man_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      # redis:
      #   image: redis
      #   ports:
      #     - 6379:6379
      #   options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      RAILS_ENV: test
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgres
      # DATABASE_URL: postgres://postgres:postgres@localhost:5432
      # REDIS_URL: redis://localhost:6379/0
  
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Prepare test db
        run: bin/rails db:test:prepare

      - name: Run tests
        run: bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
  
  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v1

      - name: docker compose
        run: docker compose up

      - name: Run health check
        run: |
          docker compose exec webapp curl -I http://localhost:3000/up || exit 1
          docker compose exec webapp bundle exec rails runner "puts ActiveRecord::Base.connection.active?" | grep true || exit 1
      
      - name: Cleanup
        if: always()
        run: docker compose down -v
